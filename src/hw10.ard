\import Data.Bool
\import Data.List
\import Equiv
\import Equiv.Univalence
\import Function.Meta
\import Logic
\import Logic.Meta
\import Meta
\import Paths
\import Paths.Meta
\import lect06 (Decide, no, yes)
\import lect10

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \infixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g o f)
  => \lam {x} {y} => p o q

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g o f)) : isInj f
  => \lam {x} {y} => p o pmap g

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func isMultipleOf3Or5 (n : Nat) : \Type
  => \case mod3 n, mod5 n \with {
    | 0, _ => \Sigma
    | _, 0 => \Sigma
    | _, _ => Empty
  }

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n)
  => unfold isMultipleOf3Or5 $ mcases (Unit-isProp <|> Empty-isProp)

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => \lam {x} {y} p => ext (p, isMultipleOf3Or5-isProp _ _ _)

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A)
  => (lem-=> A, lem-<= A)
  \where {
    \func lem-=> (A : \Type) (p : isTriv A) : \Sigma (isProp A) A
      => (\lam a a' => transport (\lam x => x = a') (p.2 a) $ p.2 a', p.1)

    \func lem-<= (A : \Type) (p : \Sigma (isProp A) A) : isTriv A \elim p
      | (p, a) => (a, p a)
  }

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Or A B)) : Empty
  => \let p : inl () = inr () => p Unit-isProp Unit-isProp _ _
     \in contradiction

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) => aux n m \where {
  \lemma aux (n m : Nat) (p q : LessOrEq n m) : p = q \elim n, m, p, q
    | 0, m, z<=n, z<=n => idp
    | suc n, suc m, s<=s p, s<=s q => pmap s<=s $ aux n m p q
}

-- 6. Докажите, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => So (x < y)) n m) => aux n m \where {
  \lemma aux (n m : Nat) (p q : ReflClosure (\lam x y => So (x < y)) n m) : p = q \elim p, q
    | refl p, refl q => pmap refl setPath
    | refl p, inc q => absurd $ <-not-= q p
    | inc p, refl q => absurd $ <-not-= p q
    | inc p, inc q => pmap inc So-lem

  \lemma <-not-= {n m : Nat} (p : So (n < m)) (q : n = m) : Empty \elim m, q
    | m, idp => rewriteF n<n=false p

  \lemma n<n=false {n : Nat} : n < n = false \elim n
    | 0 => idp
    | suc n => n<n=false
}

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty
  => \let q : refl idp = inc z<=n => p 0 0 _ _
     \in contradiction

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A
  => \lam a a' => p $ q (f a) (f a')

-- 8. Докажите, что тип с разрешимым равенством является множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A
  => setLem
      (\lam a a' => ((a = a') -> Empty) -> Empty)
      (\lam x y p q => ext)
      (\lam a f => f idp)
      (\lam {a} {a'} p => \case dec a a' \with {
        | yes q => q
        | no np => absurd $ p np
      })

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B)
  => setLem
      Or-Eq
      (\case \elim __, \elim __, \elim __, \elim __ \with {
        | inl a, inl b, inl-eq p', inl-eq q' => pmap inl-eq $ p a b p' q'
        | inr a, inr b, inr-eq p', inr-eq q' => pmap inr-eq $ q a b p' q'
      })
      (\case \elim __ \with {
        | inl a => inl-eq idp
        | inr b => inr-eq idp
      })
      (\lam {a} {a'} p => \case \elim a, \elim a', \elim p \with {
        | inl a, inl b, inl-eq p => pmap inl p
        | inr a, inr b, inr-eq p => pmap inr p
      })
  \where {
    \data Or-Eq {A B : \Type} (a b : Or A B) \elim a, b
      | inl a, inl b => inl-eq (a = b)
      | inr a, inr b => inr-eq (a = b)
  }

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x)
  => setLem {\Pi (x : A) -> B x}
      (\lam f g => \Pi (x : A) -> f x = g x)
      (\lam f g q q' => ext \lam x => p x (f x) (g x) (q x) (q' x))
      (\lam f x => idp)
      (\lam {f} {g} p => ext p)

-- 11. Докажите, что если A является множеством, то List A также им является.

\func Vec-isSet {A : \Type} {n : Nat} (pA : isSet A) : isSet (Array A n)
  => setLem {Array A n}
      (\lam xs ys => DArray \lam i => xs i = ys i)
      (\lam xs ys p q => path \lam i j => pA (xs j) (ys j) (p j) (q j) i)
      (\lam a => \lam i => idp)
      (\lam {a} {a'} p => path \lam i j => p j i)

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A)
  => setLem List-Eq (List-Eq.prop pA) List-Eq.refl List-Eq.toEq
  \where {
    \data List-Eq {A : \Type} (xs ys : List A) \elim xs, ys
      | nil, nil => nil-eq
      | x :: xs, y :: ys => cons-eq (x = y) (List-Eq xs ys)
      \where {
        \func refl {A : \Type} (xs : List A) : List-Eq xs xs \elim xs
          | nil => nil-eq
          | x :: xs => cons-eq idp $ refl xs

        \func toEq {A : \Type} {xs ys : List A} (p : List-Eq xs ys) : xs = ys \elim xs, ys, p
          | nil, nil, nil-eq => idp
          | x :: xs, y :: ys, cons-eq p q => pmap2 (::) p $ toEq q

        \func prop {A : \Type} (pA : isSet A) (xs ys : List A) (p q : List-Eq xs ys) : p = q \elim xs, ys, p, q
          | nil, nil, nil-eq, nil-eq => idp
          | x :: xs, y :: ys, cons-eq p p', cons-eq q q' => pmap2 cons-eq (pA x y p q) $ prop pA xs ys p' q'
      }
  }

-- Optional:
-- 12. Докажите, что n-типы замкнуты относительно образования \Pi-типов.
--     Hint: Доказательство по индукции. Для случая suc n нужно доказать, что если f, g : \Pi (x : A) -> B x,
--     то f = g эквивалентно \Pi (x : A) -> f x = g x.

\func levelPi {A : \Type} (B : A -> \Type) (n : Nat) (p : \Pi (x : A) -> B x `hasLevel` n)
  : (\Pi (x : A) -> B x) `hasLevel` n \elim n
  | 0 => pi-isSet B p
  | suc n => \lam f g => \let p' => levelPi {A} (\lam x => f x = g x) n (\lam x => p x (f x) (g x))
                         \in rewrite (lem B f g) p'
  \where {
    \func lem {A : \Type} (B : A -> \Type) (f g : \Pi (x : A) -> B x) : (f = g) = (\Pi (x : A) -> f x = g x)
      => Equiv-to-= $ lem' B f g

    \func lem' {A : \Type} (B : A -> \Type) (f g : \Pi (x : A) -> B x)
      : Equiv {f = g} {\Pi (x : A) -> f x = g x} \cowith
      | f (p : f = g) (x : A) => pmap (__ x) p
      | ret (p : \Pi (x : A) -> f x = g x) => ext p
      | ret_f (p : f = g) => idp
      | sec (p : \Pi (x : A) -> f x = g x) => ext p
      | f_sec (p : \Pi (x : A) -> f x = g x) => idp
  }
