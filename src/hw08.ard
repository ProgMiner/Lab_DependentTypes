\import Algebra.Meta
\import Arith.Nat
\import Data.Bool
\import Data.List
\import Function
\import Function.Meta
\import Meta
\import Paths
\import Paths.Meta
\import Set (==)
\import hw01 (fac)
\import hw06
\import lect08
\import Order.LinearOrder
\open LinearOrder \hiding (<=)

-- 1. Реализуйте функцию filter и докажите ее корректность, то есть, что выполнены следующие условия:
--    * filter p xs является подсписком xs
--    * Все элементы filter p xs удовлетворяют предикату p
--    * Любой подсписок xs с тем же свойством является подсписком filter p xs

\data All (xs : List Bool) \elim xs
  | nil => anil
  | true :: xs => acons (All xs)

\func filter {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | a :: xs => \case p a \with {
    | true => a :: filter p xs
    | false => filter p xs
  }

\func filter-sublist {A : \Type} {p : A -> Bool} {xs : List A} : Sublist (filter p xs) xs \elim xs
  | nil => snil
  | a :: xs => mcases \with {
    | true => sconst idp filter-sublist
    | false => sconsf filter-sublist
  }

\func filter-pred {A : \Type} {p : A -> Bool} {xs : List A} : All (map p $ filter p xs) \elim xs
  | nil => anil
  | a :: xs => mcases {_} {arg addPath} \with {
    | true, q => rewrite q $ acons filter-pred
    | false, _ => filter-pred
  }

\func filter-pred-sublist {A : \Type} {p : A -> Bool} {xs ys : List A} (s : Sublist xs ys) (q : All (map p xs))
  : Sublist xs (filter p ys) \elim xs, ys, s, q
  | nil, nil, snil, anil => snil
  | x :: xs, y :: ys, sconst p1 s, q => cases (p y, rewrite p1 q) \with {
    | true, acons q => sconst p1 $ filter-pred-sublist s q
  }
  | xs, y :: ys, sconsf s, q => cases (p y) \with {
    | true => sconsf $ filter-pred-sublist s q
    | false => filter-pred-sublist s q
  }

-- 2. Докажите, что Perm l1 l2 тогда и только тогда, когда Insertion.sort l1 = Insertion.sort l2.

\func perm-inv {A : \Type} {xs ys : List A} (p : Perm xs ys) : Perm ys xs \elim xs, ys, p
  | nil, nil, perm-nil => perm-nil
  | xs, ys, perm-trans p1 p2 => perm-trans (perm-inv p2) (perm-inv p1)
  | x :: xs, y :: ys, perm-cons p p1 => perm-cons (inv p) $ perm-inv p1
  | x :: x' :: xs, y :: y' :: ys, perm-swap p p1 p2 => perm-swap (inv p1) (inv p) (inv p2)

\func perm-sort {A : Dec} (xs ys : List A) : Perm xs ys <-> (Insertion.sort xs = Insertion.sort ys)
  => (perm-sort-=>, perm-sort-<=)
  \where {

    \func perm-sort-=> {A : \Set} {xs ys : List A} {d : Dec A} (p : Perm xs ys)
      : Insertion.sort xs = Insertion.sort ys \elim xs, ys, p
      | nil, nil, perm-nil => idp
      | xs, ys, perm-trans p1 p2 => perm-sort-=> p1 *> perm-sort-=> p2
      | x :: xs, y :: ys, perm-cons p p1 => rewrite p $ pmap (Insertion.sort.insert y) $ perm-sort-=> p1
      | x :: x' :: xs, y :: y' :: ys, perm-swap p p1 p2
      => rewrite (Insertion.sort-perm.insert-comm _ _ _, p, p1)
        $ pmap (Insertion.sort.insert y o Insertion.sort.insert y') $ pmap _ p2

    \func perm-sort-<= {A : \Set} {d : Dec A} {xs ys : List A} (p : Insertion.sort xs = Insertion.sort ys) : Perm xs ys
      => perm-trans (Insertion.sort-perm xs) $ perm-trans (rewrite p perm-refl) $ perm-inv (Insertion.sort-perm ys)
  }

-- 3. Докажите, что спецификация "результат является перестановкой входа и отсортирован" является полной для функции sort.

\func sort-idemp {A : Dec} {xs : List A} (s : Sorted xs) : xs = Insertion.sort xs \elim xs, s
  | nil, sorted-nil => idp
  | _ :: nil, sorted-cons _ _ => idp
  | x :: x' :: xs, sorted-cons px s => cases (Insertion.sort.insert x' (Insertion.sort xs) arg addPath) \with {
    | nil, p => rewrite (inv p) $ pmap (x ::) $ sort-idemp s
    | y :: ys, p => \let | q => sort-idemp s *> p
                         | qh => pmap (headDef x) q
                         | qt => pmap tail q
                    \in rewrite (inv qh, dec<=_reduce px) $ pmap (x :: x' :: __) qt
  }

\func completeness {A : Dec} {xs : List A}
                   (sort : List A -> List A) (p : Perm xs (sort xs)) (s : Sorted (sort xs))
  : sort xs = Insertion.sort xs
  => sort xs ==< sort-idemp s >==
    Insertion.sort (sort xs) ==< inv ((perm-sort xs (sort xs)).1 p) >==
    Insertion.sort xs `qed

-- 4. Определите факториал через хвостовую рекурсию.
--    Докажите, что он равен обычному определению факториала.

\func fact (n : Nat) => hlp n 1
  \where {
    \func hlp (n : Nat) (acc : Nat) : Nat \elim n
      | 0 => acc
      | suc n => hlp n (acc Nat.* suc n)
  }

\func fact-eq {n : Nat} : fact n = fac n => aux
  \where {
    \func aux {n : Nat} {acc : Nat} : fact.hlp n acc = fac n Nat.* acc \elim n
      | 0 => rewriteI NatSemiring.*-comm idp
      | suc n => aux *> equation
  }

-- 5. Определите функцию, которая проверяет правильность скобочной последовательности.
--    Докажите ее корректность.

\data Paren | Left | Right

\func isBalanced (xs : List Paren) : Bool => hlp 0 xs
  \where {

    \func hlp (acc : Nat) (xs : List Paren) : Bool \elim xs
      | nil => acc == 0
      | Left :: xs => hlp (suc acc) xs
      | Right :: xs => \case \elim acc \with {
        | 0 => false
        | suc acc => hlp acc xs
      }

    \func test1 : isBalanced nil = true => idp
    \func test2 : isBalanced (Left :: Right :: nil) = true => idp
    \func test3 : isBalanced (Left :: Right :: Left :: Right :: nil) = true => idp
    \func test4 : isBalanced (Left :: Left :: Right :: Right :: nil) = true => idp
    \func test5 : isBalanced (Left :: Right :: Right :: Left :: nil) = false => idp
    \func test6 : isBalanced (Right :: nil) = false => idp
    \func test7 : isBalanced (Left :: nil) = false => idp
  }

\data Balanced (xs : List Paren) \with
  | nil => nil-balanced
  | Left :: xs => cons-balanced {ys : List Paren} (Balanced ys) (xs = ys ++ Right :: nil)
  | xs => append-balanced {ys zs : List Paren} (Balanced ys) (Balanced zs) (xs = ys ++ zs)

\data BalPrefix (xs : List Paren) (acc : Nat) \elim acc
  | 0 => balPrefix-nil (Balanced xs)
  | suc acc => balPrefix-cons (ys zs : List Paren) (BalPrefix ys acc) (Balanced zs) (xs = ys ++ Left :: zs)
  \where {

    \func concat {xs ys : List Paren} {acc : Nat} (p : BalPrefix xs acc) (q : Balanced ys)
      : BalPrefix (xs ++ ys) acc \elim acc, p
      | 0, balPrefix-nil p => balPrefix-nil (append-balanced p q idp)
      | suc acc, balPrefix-cons ys1 zs p b p1 => balPrefix-cons ys1 (zs ++ ys) p (append-balanced b q idp)
          (pmap (`++ ys) p1 *> ++-assoc)
  }

\func isBalanced-correct (xs : List Paren) : (isBalanced xs = true) <-> Balanced xs
  => (\lam p => =>-lem (balPrefix-nil nil-balanced) p, \lam p => inv $ rewriteF ++_nil $ <=-lem nil 0 p)
  \where {

    \func =>-lem {xs ys : List Paren} {acc : Nat} (p : BalPrefix xs acc) (q : isBalanced.hlp acc ys = true)
      : Balanced (xs ++ ys) \elim ys
      | nil => \case \elim acc, \elim p, \elim q \with {
        | 0, balPrefix-nil b, q => rewrite ++_nil b
      }
      | Left :: ys =>
        \have q' => =>-lem (balPrefix-cons xs nil p nil-balanced idp) q
        \in rewrite ++-assoc at q' $ q'
      | Right :: ys => \case \elim xs, \elim acc, \elim p, \elim q \with {
        | xs, 0, balPrefix-nil _, ()
        | xs, suc acc, balPrefix-cons ys1 zs p b idp, q =>
          \have q' => =>-lem (BalPrefix.concat p (cons-balanced b idp)) q
          \in rewrite (++-assoc, ++-assoc) at q' $ rewrite ++-assoc q'
      }

    \func <=-lem {xs : List Paren} (ys : List Paren) (acc : Nat) (p : Balanced xs)
      : isBalanced.hlp acc ys = isBalanced.hlp acc (xs ++ ys) \elim xs, p
      | nil, nil-balanced => idp
      | Left :: xs, cons-balanced p idp => rewrite ++-assoc $ <=-lem (Right :: ys) (suc acc) p
      | xs, append-balanced {ys1} {zs} p1 p2 p3 => \case \elim xs, \elim p3 \with {
        | xs, idp => <=-lem ys acc p2 *> rewrite ++-assoc (<=-lem (zs ++ ys) acc p1)
      }
  }
