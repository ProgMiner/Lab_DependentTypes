\import Data.Bool
\import Equiv
\import Equiv.Univalence
\import Function
\import Function.Meta
\import HLevel ()
\import Logic (<->, inP)
\import Logic.Meta
\import Meta
\import Paths (*>, inv, pmap)
\import Paths.Meta
\import lect11

-- 1. Докажите, что если A : \Prop, то Trunc A эквивалентен A.

\func trunc-prop {A : \Prop} : Trunc A <-> A => (=>-lem, trunc) \where {
  \lemma =>-lem {A : \Prop} (x : Trunc A) : A \elim x
    | trunc a => a
}

-- 2. Докажите следующий закон де Моргана.

\func deMorgan (A B C : \Prop) : (\Sigma A (B `Or` C)) <-> ((\Sigma A B) `Or` (\Sigma A C))
  => (=>-lem, <=-lem)
  \where {
    \lemma =>-lem {A B C : \Prop} (p : \Sigma A (B `Or` C)) : (\Sigma A B) `Or` (\Sigma A C) \elim p
      | (a, inl b) => inl (a, b)
      | (a, inr c) => inr (a, c)

    \lemma <=-lem {A B C : \Prop} (p : (\Sigma A B) `Or` (\Sigma A C)) : \Sigma A (B `Or` C) \elim p
      | inl (a, b) => (a, inl b)
      | inr (a, c) => (a, inr c)
  }

-- 3. Определите элиминатор для Or через Or-rec, не используя паттерн матчинг на Or.

\func Or-elim {A B : \Prop} (C : Or A B -> \Prop)
              (f : \Pi (x : A) -> C (inl x)) (g : \Pi (y : B) -> C (inr y))
              (p : A `Or` B)
  : C p
  => \let x => Or-rec {A} {B} {\Sigma (p : A `Or` B) (C p)} (\lam a => (inl a, f a)) (\lam b => (inr b, g b)) p
     \in transport (\lam q => C q) (Path.inProp _ _) x.2

-- 4. Докажите, что тип утверждений является множеством.

\func prop-isSet : isSet \Prop
  => \lam A B => Path.inProp

-- 5. Докажите, что функции Prop1-to-Prop2 и Prop2-to-Prop1 взаимно обратны и, как следствие, что Prop1 = Prop2.

\func Prop1=Prop2 : Equiv Prop1-to-Prop2 Prop2-to-Prop1 \cowith
  | sec => Prop2-to-Prop1
  | ret_f (A : \Prop) => ext (\lam (inc p) => p, Prop2-to-Prop1'.inc)
  | f_sec (A : Prop2) : Prop1-to-Prop2 (Prop2-to-Prop1 A) = A \elim A {
    | (A, p) => \let q : Prop2-to-Prop1' A p = A => Equiv-to-= (\new Equiv {
      | f => Prop2-to-Prop1'-to-A
      | ret => Prop2-to-Prop1'.inc
      | sec => Prop2-to-Prop1'.inc
      | ret_f (q : Prop2-to-Prop1' A p) => Path.inProp _ _
      | f_sec (q : A) => p _ _
    }) \in ext (q, unfold (Prop2-to-Prop1, Prop1-to-Prop2) $ isProp-in-Prop _ _)
  }
  \where {
    \lemma Prop2-to-Prop1'-to-A {A : \Type} {p : isProp A} (q : Prop2-to-Prop1' A p) : A \elim q
      | inc a => a

    \func isProp-in-Prop {A : \Type} : isProp (isProp A)
      => \lam q q' => HLevel.isProp.levelProp A q q'
  }

-- Можно сделать только одно из упражнений 6a, 6b на выбор.
-- 6a. Тип С называется когенератором, если для любых множеств A и B и любых функция f, g : A -> B верно,
--     что если h `o` f = h `o` g для всех h : B -> C, то f = g.
--     Докажите, что \Prop является когенератором.

\func isCogenerator (C : \Type) => \Pi {A B : \Set} (f g : A -> B) (p : \Pi (h : B -> C) -> h o f = h o g) -> f = g

\func PropIsCogenerator : isCogenerator \Prop
  => \lam {A} {B} f g p => ext \lam a => \let | h (b : B) : \Prop => b = g a
                                              | q : h (f a) = h (g a) => pmap (\lam h' => h' a) $ p h
                                         \in transport id (inv q) idp

-- 6b. Тип X называется инъективным, если для любой функции f : A -> X и любой инъекции i : A -> B сущесвует
--     функция l : B -> X такая, что l `o` i = f.
--     Докажите, что \Prop инъективен.

\func isInj {A B : \Type} (f : A -> B) => \Pi (x y : A) -> f x = f y -> x = y

\func isInjective (X : \Type) => \Pi {A B : \Type} (f : A -> X) (i : A -> B) (p : isInj i) -> \Sigma (l : B -> X) (l o i = f)

\func Prop-isInjective : isInjective \Prop
  => \lam {A} {B} f i p =>
      ( \lam b => ∃ (a : A) (i a = b) (f a)
      , ext \lam a => ext (\lam (inP (a', q, q')) => rewriteI (p _ _ q) q', \lam q => inP (a, idp, q))
      )

-- Можно сделать только одно из упражнений 7a, 7b на выбор.
-- 7a. Докажите, что (Bool = Bool) = Bool.

\func BoolAut : (Bool = Bool) = Bool => Equiv-to-= eq \where {
  \func eq : Equiv {Bool = Bool} {Bool} => rewrite (QEquiv-to-= univalence) eq'

  \func eq' : Equiv {Equiv {Bool} {Bool}} {Bool} \cowith
    | f (f : Equiv {Bool} {Bool}) => f false
    | ret (b : Bool) : Equiv {Bool} {Bool} \elim b {
      | true => \new Equiv not not not-not not not-not
      | false => \new Equiv id id (\lam _ => idp) id (\lam _ => idp)
    }
    | sec => ret
    | f_sec (b : Bool) : ret b false = b \elim b {
      | true => idp
      | false => idp
    }
    | ret_f (f : Equiv {Bool} {Bool}) => cases (f false arg addPath) \with {
      | true, p => Equiv.equals $ ext \case \elim __ \with {
        | true => cases (f true arg addPath) \with {
          | true, p' => \case f.isInj $ p' *> inv p \with {}
          | false, p' => idp
        }
        | false => inv p
      }
      | false, p => Equiv.equals $ ext \case \elim __ \with {
        | true => cases (f true arg addPath) \with {
          | true, p' => idp
          | false, p' => \case f.isInj $ p' *> inv p \with {}
        }
        | false => inv p
      }
    }
}

-- 7b. Докажите, что (n+m)-элементное множество равно размеченному объединению n- и m-элементных множеств.
