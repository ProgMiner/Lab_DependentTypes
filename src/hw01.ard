-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) => y
\func apply (f : Nat -> Nat) (x : Nat) => f x
\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+, *, div)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 2 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (c t f : Bool): Bool \elim c
  | true => t
  | false => f

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat): Nat \elim y
  | 0 => 1
  | suc y => (x ^ y) * x

\func fac (x : Nat): Nat
  | 0 => 1
  | suc x => fac x * suc x

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => x - (x `div` y) * y

\func mod'test1 : 100 `mod` 1 = 0 => idp
\func mod'test2 : 100 `mod` 100 = 0 => idp
\func mod'test3 : 100 `mod` 99 = 1 => idp
\func mod'test4 : 45 `mod` 99 = 45 => idp
\func mod'test5 : 137 `mod` 6 = 5 => idp

\func gcd (x y : Nat) => gcd' (x + y) x y \where {

  \func gcd' (fuel x y : Nat): Nat \elim fuel
    | 0 => 0
    | suc fuel => \case y \with {
      | 0 => x
      | suc _ => gcd' fuel y (x `mod` y)
    }
}

\func gcd'test1 : gcd 1 1 = 1 => idp
\func gcd'test2 : gcd 1 0 = 1 => idp
\func gcd'test3 : gcd 31413 0 = 31413 => idp
\func gcd'test4 : gcd 31413 1 = 1 => idp
\func gcd'test5 : gcd 123 321 = 3 => idp

