\import Data.Maybe
\import Data.Or
\import Function
\import Function.Meta
\import Logic (Not)
\import Paths
\import Paths.Meta
\import hw06
\import lect06 (Decide, no, yes)
\import lect09

-- 1. Определите отношение многошаговой редукции на Term.

\func Red {V : \Set} : Term V -> Term V -> \Type => ReflTransClosure Red1
\where {

  \func app-left {V : \Set} {t1 t2 : Term V} (s : Term V) (r : Red t1 t2) : Red (app t1 s) (app t2 s) \elim r
    | rtc-R r => rtc-R (red-left r idp)
    | rtc-refl idp => rtc-refl idp
    | rtc-trans r1 r2 => rtc-trans (app-left s r1) (app-left s r2)

  \func app-right {V : \Set} {s1 s2 : Term V} (t : Term V) (r : Red s1 s2) : Red (app t s1) (app t s2) \elim r
    | rtc-R r => rtc-R (red-right idp r)
    | rtc-refl idp => rtc-refl idp
    | rtc-trans r1 r2 => rtc-trans (app-right t r1) (app-right t r2)

  \func in-lam {V : \Set} {t1 t2 : Term (Maybe V)} (r : Red t1 t2) : Red (lam t1) (lam t2) \elim r
    | rtc-R r => rtc-R (red-lam r)
    | rtc-refl idp => rtc-refl idp
    | rtc-trans r1 r2 => rtc-trans (in-lam r1) (in-lam r2)

  \func forAcc {V : \Set} {t t' : Term V} (a : Acc Red1 t) (r : Red t t') : Acc Red1 t' \elim r
    | rtc-R r => \case \elim a \with { | acc f => f r }
    | rtc-refl idp => a
    | rtc-trans r1 r2 => forAcc (forAcc a r1) r2

  \func over-termMap {V U : \Set} {t t' : Term V} (f : V -> U) (r : Red t t') : Red (termMap f t) (termMap f t') \elim r
    | rtc-R r => rtc-R (red1_termMap f r)
    | rtc-refl idp => rtc-refl idp
    | rtc-trans r1 r2 => rtc-trans (over-termMap f r1) (over-termMap f r2)
  \where {

    \func red1_termMap {V U : \Set} (f : V -> U) {t t' : Term V} (r : Red1 t t')
      : Red1 (termMap f t) (termMap f t') \elim t, t', r
      | app t1 t2, t', beta {f1} idp p => beta idp
        $ pmap (termMap _ __) p
        *> inv (TermMonad.termMap_>>=-right _ _ _)
        *> pmap (f1 >>=) (ext \case \elim __ \with {
          | nothing => idp
          | just v => idp
          })
        *> inv (TermMonad.termMap_>>=-left _ _ _)
      | app t1 t2, app t1' t2', red-left r idp => red-left (red1_termMap f r) idp
      | app t1 t2, app t1' t2', red-right idp r => red-right idp (red1_termMap f r)
      | lam t, lam t', red-lam r => red-lam (red1_termMap _ r)
  }
}

-- 2. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм,
--    к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | var v => no \case __ \with { | (_, ()) }
  | app (var _) t2 => app-not-lam (var _) t2 (strategy (var _)) (\case __ \with { | (t3, ()) })
  | app (app _ _) t2 => app-not-lam (app _ _) t2 (strategy (app _ _)) (\case __ \with { | (t3, ()) })
  | app (lam t) t2 => yes (_, beta idp idp)
  | app unit t2 => app-not-lam unit t2 (strategy unit) (\case __ \with { | (t3, ()) })
  | lam t => \case strategy t \with {
    | yes (s, r) => yes (lam s, red-lam r)
    | no n => no \case __ \with {
      | (var v, ())
      | (app t1 t2, ())
      | (lam s, red-lam r) => n (s, r)
      | (unit, ())
    }
  }
  | unit => no \case __ \with { | (s, ()) }
  \where {
    \func app-not-lam {V : \Set} (t1 t2 : Term V)
                      (res1 : Decide (\Sigma (s : Term V) (Red1 t1 s)))
                      (q : Not (\Sigma (t3 : Term (Maybe V)) (t1 = lam t3)))
      : Decide (\Sigma (s : Term V) (Red1 (app t1 t2) s))
      => \case res1 \with {
        | yes (s, r) => yes (app s t2, red-left r idp)
        | no n => \case strategy t2 \with {
          | yes (s, r) => yes (app t1 s, red-right idp r)
          | no n1 => no \case __ \with {
            | (_, beta p p1) => q (_, p)
            | (app t3 t4, red-left r p) => n (_, r)
            | (app t3 t4, red-right p r) => n1 (_, r)
          }
        }
      }
  }

-- 3. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc f => acc \lam {a'} r => appAccLeft $ f $ red-left r idp

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s \elim a
  | acc f => acc \lam {a'} r => appAccRight $ f $ red-right idp r

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t \elim a
  | acc f => acc \lam {a'} r => subLamAcc $ f $ red-lam r

-- 4. Докажите, что нейтральные термы замкнуты относительно редукций.

\func neutralRed {V : \Set} {t s : Term V} (r : Red1 t s) (n : Neutral t) : Neutral s \elim t, s, r, n
  | app _ _, _, beta p p1, app-neutral n a => \case rewriteF p n
  | app _ _, app _ _, red-left r p, app-neutral n a => app-neutral (neutralRed r n) $ rewriteF p a
  | app _ _, app _ _, red-right p r, app-neutral n (acc f) => app-neutral (rewriteF p n) $ f r

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию:
--    если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\lemma maybe-fmap {A B C : \Set} {c : C} {f : A -> B} {g : B -> C}
  : maybe c (g o f) = maybe c g o MaybeMonad.fmap f
  => ext \case \elim __ \with {
    | nothing => idp
    | just _ => idp
  }

\func substLem_termMap {U V : \Set} (ctx : V -> Type) (f : U -> V) (t : Term U) (B : Type)
                       (p : hasType (ctx o f) t B)
  : hasType ctx (termMap f t) B \elim t, B, p
  | unit, Unit, unit-type => unit-type
  | var v, B, var-type p => var-type p
  | app t1 t2, B, app-type p1 p2 => app-type (substLem_termMap ctx f t1 _ p1) (substLem_termMap ctx f t2 _ p2)
  | lam t, Arr B1 B2, lam-type p => lam-type $ substLem_termMap (maybe B1 ctx) (MaybeMonad.fmap f) t B2
                                             $ rewriteI maybe-fmap p

\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B \elim b, B, h
  | unit, Unit, unit-type => unit-type
  | var u, B, var-type p => rewriteI p $ h' u
  | app b1 b2, B, app-type h1 h2 => app-type (substLem ctx b1 _ h1 ctx' a h') (substLem ctx b2 _ h2 ctx' a h')
  | lam b, Arr B B1, lam-type h => lam-type $ substLem (maybe B ctx) b _ h (maybe B ctx') (liftM a)
                                            $ \case \elim __ \with {
    | nothing => var-type idp
    | just x => substLem_termMap (maybe B ctx') just (a x) (ctx x) (h' x)
  }

\func substLem1 {U : \Set} (ctx : U -> Type) (A B : Type) (a : Term U) (b : Term (Maybe U))
                (p : hasType (maybe A ctx) b B) (q : hasType ctx a A)
  : hasType ctx (b >>= maybe a var) B
  => substLem (maybe A ctx) b B p ctx (maybe a var) \case \elim __ \with {
    | nothing => q
    | just _ => var-type idp
  }

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func red1Lem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red1 a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A \elim a, a', r, A, h
  | app a1 a2, a', beta {f} idp p2, A, app-type (lam-type h1) h2 => rewrite p2 $ substLem1 ctx _ A a2 f h1 h2
  | app _ _, app _ _, red-left r p, _, app-type h1 h2 => app-type (red1Lem r h1) (rewriteI p h2)
  | app _ _, app _ _, red-right p r, _, app-type h1 h2 => app-type (rewriteI p h1) (red1Lem r h2)
  | lam _, lam _, red-lam r, Arr _ _, lam-type h => lam-type $ red1Lem r h

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A \elim r
  | rtc-R r => red1Lem r h
  | rtc-refl p => rewriteI p h
  | rtc-trans r1 r2 => redLem r2 (redLem r1 h)

-- Optional
-- 7. Для доказательства typeableInterp понадобится вспомогательное утверждение. Докажите его.

\data HeadRed {V : \Set} (a t s : Term V) \elim t, s
  | app t1 t2, app s1 s2 => headApp (HeadRed a t1 s1) (t2 = s2)
  | app t a', s => headBeta {f : Term (Maybe V)} (a = a') (lam f = t) (f >>= maybe a var = s)

\func red_>>= {V U : \Set} {t t' : Term V} (a : V -> Term U) (r : Red1 t t') : Red1 (t >>= a) (t' >>= a) \elim t, t', r
  | app t1 t2, t', beta {f} idp p => rewrite p
    $ beta idp (>>=-assoc _ _ _ *> pmap (f >>=) (ext (\case \elim __ \with {
      | nothing => idp
      | just v => return-left v a *> inv (return-right (a v)) *> inv (TermMonad.termMap_>>=-left _ _ _)
    })) *> inv (>>=-assoc _ _ _))
  | app t1 t2, app t1' t2', red-left r idp => red-left (red_>>= _ r) idp
  | app t1 t2, app t1' t2', red-right idp r => red-right idp (red_>>= _ r)
  | lam t, lam t', red-lam r => red-lam (red_>>= _ r)

\func redInSubst {V U : \Set} (f : Term V) (a a' : V -> Term U) (r : \Pi (v : V) -> Red (a v) (a' v))
  : Red (f >>= a) (f >>= a') \elim f
  | unit => rtc-refl idp
  | var v => r v
  | app f1 f2 =>
    \have | r1 => redInSubst f1 a a' r
          | r2 => redInSubst f2 a a' r
    \in rtc-trans (Red.app-left _ r1) (Red.app-right _ r2)
  | lam f =>
    \have | r' => redInSubst f (liftM a) (liftM a') (\case \elim __ \with {
      | nothing => rtc-refl idp
      | just v => Red.over-termMap _ (r v)
    })
    \in Red.in-lam r'

\func headRedTrans {V : \Set} {a t t' s : Term V} (p : HeadRed a t s) (r : Red1 t t')
  : (\Sigma (s' : Term V) (HeadRed a t' s') (Red1 s s'))
  `Or` (\Sigma (a' s' : Term V) (HeadRed a' t' s') (Red1 a a') (Red s s'))
         `Or` (t' = s)
\elim t, t', s, p, r
  | app t1 t2, t', app s1 s2, headApp p idp, beta p2 p3 => \case rewriteF p2 p
  | app t1 t2, app t1' t2', app s s1, headApp p idp, red-left r idp => \case headRedTrans p r \with {
    | inl (s', p', r') => inl (app s' t2, headApp p' idp, red-left r' idp)
    | inr (inl (a', s', p', r1, r2)) => inr $ inl (a', app s' t2, headApp p' idp, r1, Red.app-left t2 r2)
    | inr (inr b) => inr $ inr $ rewrite b idp
  }
  | app t1 t2, app t1' t2', app s1 s2, headApp p idp, red-right idp r => inl (app s1 t2', headApp p idp, red-right idp r)
  | app t1 t2, t', s, headBeta {f} idp idp p, beta {f1} p1 p2 =>
    \have p1 : f = f1 => path $ \case p1 __ \with { | lam t => t | _ => unit }
    \in inr $ inr $ p2 *> pmap (`>>= _) (inv p1) *> p
  | app unit t2, app t1' t2', s, headBeta idp () p, _
  | app (var v) t2, app t1' t2', s, headBeta idp () p, _
  | app (app t1 t2) t3, app t1' t3', s, headBeta idp () p, _
  | app (lam t1) t2, app unit t2', s, headBeta idp _ p, red-left () _
  | app (lam t1) t2, app (var v) t2', s, headBeta idp _ p, red-left () _
  | app (lam t1) t2, app (app t1'1 t1'2) t2', s, headBeta idp _ p, red-left () _
  | app (lam t1) t2, app (lam t1') t2', s, headBeta {f} idp p1 p2, red-left (red-lam r) idp =>
    \have | p1' : f = t1 => path $ \case p1 __ \with { | lam t => t | _ => unit }
          | p2' => rewriteF p1' p2
    \in rewriteI p2' $ inl (t1' >>= maybe a var, headBeta idp idp idp, red_>>= _ r)
  | app t1 t2, app t1' t2', s, headBeta {f} idp idp p, red-right idp r =>
    \have | rs (v : Maybe V) : Red (maybe a var v) (maybe t2' var v) => \case \elim v \with {
      | nothing => rtc-R r
      | just v => rtc-refl idp
    }
          | r' : Red (f >>= maybe a var) (f >>= maybe t2' var) => redInSubst _ _ _ rs
    \in inr $ inl (t2', f >>= maybe t2' var, headBeta idp idp idp, r, rewriteI p r')

\func headRedAcc {V : \Set} {a t s : Term V} (p : HeadRed a t s)
                 (accA : Acc Red1 a) (accS : Acc Red1 s) : Acc Red1 t \elim accA, accS
  | acc f, acc g => acc (\lam r => \case headRedTrans p r \with {
    | inl (s', p', r') => headRedAcc p' (acc f) (g r')
    | inr (inl (a', s', p', r1, r2)) => headRedAcc p' (f r1) (Red.forAcc (acc g) r2)
    | inr (inr b) => rewrite b (acc g)
  })

\func redInterp {V : \Set} {a t s : Term V} {T : Type} (r : HeadRed a t s)
                (acc : Acc Red1 a) (q : Interp T s) : Interp T t \elim T
  | Unit => headRedAcc r acc q
  | Arr T1 T2 => \lam i => redInterp (headApp r idp) acc (q i)

-- 8. Докажите typeableInterp из лекции

\func typeableInterp {U V : \Set} (ctx : U -> Type) (env : U -> Term V)
                     (C : \Pi (u : U) -> Interp (ctx u) (env u))
                     {t : Term U} {T : Type} (p : hasType ctx t T)
  : Interp T (t >>= env) \elim t, T, p
  | unit, Unit, unit-type => acc \case \elim __
  | var v, T, var-type idp => C v
  | app t1 t2, T, app-type p1 p2 => typeableInterp ctx env C p1 $ typeableInterp ctx env C p2
  | lam t, Arr T1 T2, lam-type p => \lam {t1} i =>
      \have i' => typeableInterp (maybe T1 ctx) (\lam x => liftM env x >>= maybe t1 var) (\case \elim __ \with {
        | nothing => i
        | just u => rewrite (TermMonad.termMap_>>=-left, TermMonad.return-right) (C u)
      }) p
      \in redInterp (headBeta idp idp (Monad.>>=-assoc _ _ _)) (interpAcc T1 t1 i) i'
