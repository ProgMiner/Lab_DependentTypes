\import Algebra.Meta
\import Data.List
\import Function
\import Paths
\import lect03

\open Nat(+,*)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\func task1 : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func task2 : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} {xs ys zs : List A} : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | a :: xs => pmap (\lam as => a :: as) ++-assoc

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

\func ++-nil-neutral {A : \Type} {xs : List A} : xs ++ nil = xs \elim xs
  | nil => idp
  | a :: xs => pmap (a ::) ++-nil-neutral

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} {xs ys : List A} : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs, ys
  | nil, nil => idp
  | nil, ys => inv ++-nil-neutral
  | xs, nil => pmap reverse ++-nil-neutral
  | x :: xs, ys =>
    reverse (xs ++ ys) ++ x :: nil ==< pmap (`++ x :: nil) reverse++ >==
    (reverse ys ++ reverse xs) ++ x :: nil ==< ++-assoc >==
    reverse ys ++ reverse xs ++ x :: nil `qed

\func reverse-isInvolutive {A : \Type} {xs : List A} : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | x :: xs =>
    reverse (reverse xs ++ x :: nil) ==< reverse++ >==
    reverse (x :: nil) ++ reverse (reverse xs) ==< pmap (x ::) reverse-isInvolutive >==
    x :: xs `qed

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func rdistr {n m k : Nat} : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n =>
    (m + k) * n + (m + k) ==< pmap (`+ (m + k)) rdistr >==
    m * n + k * n + (m + k) ==< +-assoc >==
    m * n + (k * n + (m + k)) ==< pmap (m * n +) (inv +-assoc) >==
    m * n + (k * n + m + k) ==< pmap (m * n +) (pmap (`+ k) +-comm) >==
    m * n + (m + k * n + k) ==< pmap (m * n +) +-assoc >==
    m * n + (m + (k * n + k)) ==< inv +-assoc >==
    m * n + m + (k * n + k) `qed

\func ldistr {n m k : Nat} : n * (m + k) = n * m + n * k \elim m
  | 0 => idp
  | suc m =>
    n * (m + k) + n ==< pmap (`+ n) ldistr >==
    n * m + n * k + n ==< +-assoc >==
    n * m + (n * k + n) ==< pmap (n * m +) +-comm >==
    n * m + (n + n * k) ==< inv +-assoc >==
    n * m + n + n * k `qed

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2
  {A B C : \Type} (f : A -> B -> C)
  {a a' : A} (p : a = a')
  {b b' : B} (q : b = b')
  : f a b = f a' b' =>
  f a b ==< pmap (\lam b' => f a b') q >==
  f a b' ==< transport (\lam a' => f a b' = f a' b') p idp >==
  f a' b' `qed

-- Смешно, что можно сделать вот так:

\func pmap2'
  {A B C : \Type} (f : A -> B -> C)
  {a a' : A} (p : a = a')
  {b b' : B} (q : b = b')
  : f a b = f a' b' => cong

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => transport id p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  repl (pmap B p) b